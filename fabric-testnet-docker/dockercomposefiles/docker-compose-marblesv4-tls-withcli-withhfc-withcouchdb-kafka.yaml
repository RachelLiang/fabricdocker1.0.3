version: '2'

services:
  ca0.org1.bctrustmachine.cn:
    container_name: ca0.org1.bctrustmachine.cn  
    image: blockchain101/fabric-ca:1.0.3
    tty: true    
    environment:
      - FABRIC_CA_SERVER_AFFILIATIONS_ORG3=[department1;department2]
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca0-org1
#      - FABRIC_CA_SERVER_TLS_ENABLED=true
#      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.bctrustmachine.cn-cert.pem
#      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/330fcf0c14aa34bdcf5d5482ca4d6c67495f2a3cab501aef483da63a06e959ea_sk
    ports:
      - "7054:7054"
    command: bash -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.bctrustmachine.cn-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/330fcf0c14aa34bdcf5d5482ca4d6c67495f2a3cab501aef483da63a06e959ea_sk -b admin:adminpw -d; sleep 100000'
    #command: /bin/bash
    volumes:
      - ./channel/crypto-config/peerOrganizations/org1.bctrustmachine.cn/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca0.org1.bctrustmachine.cn

  ca0.org2.bctrustmachine.cn:
    container_name: ca0.org2.bctrustmachine.cn  
    image: blockchain101/fabric-ca:1.0.3
    tty: true     
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca0-org2
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.bctrustmachine.cn-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/376573436d27ffee54849981c2c1033c26af0c5dbf5d2753d345bce5a071a6e2_sk
    ports:
      - "8054:7054"
    command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org2.bctrustmachine.cn-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/376573436d27ffee54849981c2c1033c26af0c5dbf5d2753d345bce5a071a6e2_sk -b admin:adminpw' -d
    #command: /bin/bash    
    volumes:
      - ./channel/crypto-config/peerOrganizations/org2.bctrustmachine.cn/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca0.org2.bctrustmachine.cn

  zookeeper0.bctrustmachine.cn:
    container_name: zookeeper0.bctrustmachine.cn
    image: blockchain101/fabric-zookeeper:1.0.3
    hostname: zookeeper0.bctrustmachine.cn
    environment:
      - ZOO_SERVERS=server.0=zookeeper0.bctrustmachine.cn:4001:4002 server.1=zookeeper1.bctrustmachine.cn:4001:4002 server.2=zookeeper2.bctrustmachine.cn:4001:4002
      - ZOO_MY_ID=0
    #command: /bin/bash -c "sleep 1000000"     
      
  zookeeper1.bctrustmachine.cn:
    container_name: zookeeper12.bctrustmachine.cn
    image: blockchain101/fabric-zookeeper:1.0.3
    hostname: zookeeper1.bctrustmachine.cn
    environment:
      - ZOO_SERVERS=server.0=zookeeper0.bctrustmachine.cn:4001:4002 server.1=zookeeper1.bctrustmachine.cn:4001:4002 server.2=zookeeper2.bctrustmachine.cn:4001:4002
      - ZOO_MY_ID=1    
    #command: /bin/bash -c "sleep 1000000"

     
  zookeeper2.bctrustmachine.cn:
    container_name: zookeeper2.bctrustmachine.cn
    image: blockchain101/fabric-zookeeper:1.0.3
    hostname: zookeeper2.bctrustmachine.cn
    environment:
      - ZOO_SERVERS=server.0=zookeeper0.bctrustmachine.cn:4001:4002 server.1=zookeeper1.bctrustmachine.cn:4001:4002 server.2=zookeeper2.bctrustmachine.cn:4001:4002
      - ZOO_MY_ID=2   
    #command: /bin/bash -c "sleep 1000000"       

      
  kafka0.bctrustmachine.cn:
    container_name: kafka0.bctrustmachine.c
    image: blockchain101/fabric-kafka:1.0.3
    hostname: kafka0.bctrustmachine.cn
    environment:
      - KAFKA_HOST_NAME=kafka0.bctrustmachine.cn    
      - KAFKA_BROKER_ID=0
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.bctrustmachine.cn:2181,zookeeper1.bctrustmachine.cn:2181,zookeeper2.bctrustmachine.cn:2181
      - KAFKA_DEFAULT_REPLICATION_FACTOR=2
      - KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS=30000
    #command: /bin/bash
    depends_on:
      - zookeeper0.bctrustmachine.cn
      - zookeeper1.bctrustmachine.cn
      - zookeeper2.bctrustmachine.cn
      
  kafka1.bctrustmachine.cn:
    container_name: kafka1.bctrustmachine.c
    image: blockchain101/fabric-kafka:1.0.3
    hostname: kafka1.bctrustmachine.cn
    environment:
      - KAFKA_HOST_NAME=kafka1.bctrustmachine.cn       
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.bctrustmachine.cn:2181,zookeeper1.bctrustmachine.cn:2181,zookeeper2.bctrustmachine.cn:2181
      - KAFKA_DEFAULT_REPLICATION_FACTOR=2
      - KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS=30000
    #command: /bin/bash
    depends_on:
      - zookeeper0.bctrustmachine.cn
      - zookeeper1.bctrustmachine.cn
      - zookeeper2.bctrustmachine.cn
            
  kafka2.bctrustmachine.cn:
    container_name: kafka2.bctrustmachine.c
    image: blockchain101/fabric-kafka:1.0.3
    hostname: kafka2.bctrustmachine.cn
    environment:
      - KAFKA_HOST_NAME=kafka2.bctrustmachine.cn        
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0.bctrustmachine.cn:2181,zookeeper1.bctrustmachine.cn:2181,zookeeper2.bctrustmachine.cn:2181
      - KAFKA_DEFAULT_REPLICATION_FACTOR=2
      - KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS=30000
    #command: /bin/bash
    depends_on:
      - zookeeper0.bctrustmachine.cn
      - zookeeper1.bctrustmachine.cn
      - zookeeper2.bctrustmachine.cn
        

  orderer.bctrustmachine.cn:
    container_name: orderer.bctrustmachine.cn
    image: blockchain101/fabric-orderer:1.0.3
    environment:
      - GRPC_TRACE=all
      - GRPC_VERBOSITY=debug
      - ORDERER_GENERAL_LOGLEVEL=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_QUEUESIZE=1000
      - CONFIGTX_ORDERER_ORDERERTYPE=kafka
      - ORDERER_KAFKA_BROKERS=[kafka0.bctrustmachine.cn:9092,kafka1.bctrustmachine.cn:9092,kafka2.bctrustmachine.cn:9092]
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/orderer-TwoOrgs.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/tls/orderer/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/tls/orderer/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/tls/orderer/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: /bin/bash -c ". /probeKafkaBrokersWithSleep.sh; orderer"
    ports:
      - 7050:7050
    volumes:
        - ./channel:/etc/hyperledger/configtx
        - ./channel/crypto-config/ordererOrganizations/bctrustmachine.cn/orderers/orderer.bctrustmachine.cn/msp/:/etc/hyperledger/msp/orderer
        - ./channel/crypto-config/ordererOrganizations/bctrustmachine.cn/orderers/orderer.bctrustmachine.cn/tls/:/etc/hyperledger/tls/orderer
    depends_on:
      - kafka0.bctrustmachine.cn
      - kafka1.bctrustmachine.cn
      - kafka2.bctrustmachine.cn

  couchdb0.org1.bctrustmachine.cn:
    container_name: couchdb0.org1.bctrustmachine.cn
    image: blockchain101/fabric-couchdb:1.0.3
                
  peer0.org1.bctrustmachine.cn:
    container_name: peer0.org1.bctrustmachine.cn
    image: blockchain101/fabric-peer:1.0.3
    environment:
      - CORE_LOGGING_LEVEL=INFO
      - CORE_NEXT=true
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.org1.bctrustmachine.cn
      - CORE_PEER_ENDORSER_ENABLED=true
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true     
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true       
      - CORE_PEER_ADDRESS=peer0.org1.bctrustmachine.cn:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.bctrustmachine.cn:7051
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/tls/peer/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/tls/peer/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/tls/peer/ca.crt
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=dockercomposefiles_default
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0.org1.bctrustmachine.cn:5984
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start --peer-defaultchain=false
    ports:
      - 7051:7051
      - 7053:7053
    volumes:
        - /var/run/:/host/var/run/
        - ./channel/crypto-config/peerOrganizations/org1.bctrustmachine.cn/peers/peer0.org1.bctrustmachine.cn/msp/:/etc/hyperledger/msp/peer
        - ./channel/crypto-config/peerOrganizations/org1.bctrustmachine.cn/peers/peer0.org1.bctrustmachine.cn/tls/:/etc/hyperledger/tls/peer
    depends_on:
      - orderer.bctrustmachine.cn
      - couchdb0.org1.bctrustmachine.cn      

  couchdb1.org1.bctrustmachine.cn:
    container_name: couchdb1.org1.bctrustmachine.cn
    image: blockchain101/fabric-couchdb:1.0.3
        
  peer1.org1.bctrustmachine.cn:
    container_name: peer1.org1.bctrustmachine.cn
    image: blockchain101/fabric-peer:1.0.3
    environment:
      - CORE_NEXT=true
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer1.org1.bctrustmachine.cn
      - CORE_PEER_ENDORSER_ENABLED=true
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.bctrustmachine.cn:7051      
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true       
      - CORE_PEER_ADDRESS=peer1.org1.bctrustmachine.cn:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.bctrustmachine.cn:7051
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/tls/peer/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/tls/peer/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/tls/peer/ca.crt
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=dockercomposefiles_default
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb1.org1.bctrustmachine.cn:5984         
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start --peer-defaultchain=false
    ports:
      - 7056:7051
      - 7058:7053
    volumes:
        - /var/run/:/host/var/run/
        - ./channel/crypto-config/peerOrganizations/org1.bctrustmachine.cn/peers/peer1.org1.bctrustmachine.cn/msp/:/etc/hyperledger/msp/peer
        - ./channel/crypto-config/peerOrganizations/org1.bctrustmachine.cn/peers/peer1.org1.bctrustmachine.cn/tls/:/etc/hyperledger/tls/peer
    depends_on:
      - orderer.bctrustmachine.cn
      - couchdb1.org1.bctrustmachine.cn
      - peer0.org1.bctrustmachine.cn

  couchdb0.org2.bctrustmachine.cn:
    container_name: couchdb0.org2.bctrustmachine.cn
    image: blockchain101/fabric-couchdb:1.0.3
        
  peer0.org2.bctrustmachine.cn:
    container_name: peer0.org2.bctrustmachine.cn
    image: blockchain101/fabric-peer:1.0.3
    environment:
      - CORE_NEXT=true
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.org2.bctrustmachine.cn
      - CORE_PEER_ENDORSER_ENABLED=true
      - CORE_PEER_LOCALMSPID=Org2MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true      
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true            
      - CORE_PEER_ADDRESS=peer0.org2.bctrustmachine.cn:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.bctrustmachine.cn:7051

      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/tls/peer/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/tls/peer/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/tls/peer/ca.crt
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=dockercomposefiles_default
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0.org2.bctrustmachine.cn:5984      
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start --peer-defaultchain=false
    ports:
      - 8051:7051
      - 8053:7053
    volumes:
        - /var/run/:/host/var/run/
        - ./channel/crypto-config/peerOrganizations/org2.bctrustmachine.cn/peers/peer0.org2.bctrustmachine.cn/msp/:/etc/hyperledger/msp/peer
        - ./channel/crypto-config/peerOrganizations/org2.bctrustmachine.cn/peers/peer0.org2.bctrustmachine.cn/tls/:/etc/hyperledger/tls/peer
    depends_on:
      - orderer.bctrustmachine.cn
      - couchdb0.org2.bctrustmachine.cn

  couchdb1.org2.bctrustmachine.cn:
    container_name: couchdb1.org2.bctrustmachine.cn
    image: blockchain101/fabric-couchdb:1.0.3
          
  peer1.org2.bctrustmachine.cn:
    container_name: peer1.org2.bctrustmachine.cn
    image: blockchain101/fabric-peer:1.0.3
    environment:
      - CORE_NEXT=true
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer1.org2.bctrustmachine.cn
      - CORE_PEER_ENDORSER_ENABLED=true
      - CORE_PEER_LOCALMSPID=Org2MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.bctrustmachine.cn:7051      
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true      
      - CORE_PEER_ADDRESS=peer1.org2.bctrustmachine.cn:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.bctrustmachine.cn:7051
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/tls/peer/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/tls/peer/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/tls/peer/ca.crt
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=dockercomposefiles_default
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb1.org2.bctrustmachine.cn:5984
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start --peer-defaultchain=false
    ports:
      - 8056:7051
      - 8058:7053
    volumes:
        - /var/run/:/host/var/run/
        - ./channel/crypto-config/peerOrganizations/org2.bctrustmachine.cn/peers/peer1.org2.bctrustmachine.cn/msp/:/etc/hyperledger/msp/peer
        - ./channel/crypto-config/peerOrganizations/org2.bctrustmachine.cn/peers/peer1.org2.bctrustmachine.cn/tls/:/etc/hyperledger/tls/peer
    depends_on:
      - orderer.bctrustmachine.cn
      - couchdb1.org2.bctrustmachine.cn
      - peer0.org2.bctrustmachine.cn


  cli:
    container_name: cli
    image: blockchain101/fabric-cli:1.0.3
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_PEER_ADDRESSAUTODETECT=true
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_LEVEL=INFO
      - CORE_NEXT=true
      - CORE_PEER_ID=cli
      - CORE_PEER_ENDORSER_ENABLED=true
      # - CORE_PEER_COMMITTER_LEDGER_ORDERER=orderer.bctrustmachine.cn:7050
      - CORE_PEER_ADDRESS=peer0.org1.bctrustmachine.cn:7051
      - CORE_PEER_GOSSIP_IGNORESECURITY=true
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/tls/peer/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/tls/peer/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/tls/peer/ca.crt
      # - CORE_PEER_TLS_SERVERHOSTOVERRIDE=peer0.org1.bctrustmachine.cn
      - PRODUCTION_PATH=/var/hyperledger/production
    
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash -c './scripts/script-${CHANNEL_NAME}.sh ${CHANNEL_NAME}; sleep 1000000'
    #command: /bin/bash
    volumes:
        - /var/run/:/host/var/run/
        - ./channel/crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ./channel:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel
        - ./channel/crypto-config/peerOrganizations/org1.bctrustmachine.cn/peers/peer0.org1.bctrustmachine.cn/msp/:/etc/hyperledger/msp/peer
        - ./channel/crypto-config/peerOrganizations/org1.bctrustmachine.cn/peers/peer0.org1.bctrustmachine.cn/tls/:/etc/hyperledger/tls/peer
    depends_on:
      - orderer.bctrustmachine.cn
      - peer0.org1.bctrustmachine.cn
      - peer1.org1.bctrustmachine.cn
      - peer0.org2.bctrustmachine.cn
      - peer1.org2.bctrustmachine.cn

  hfc0.org1.bctrustmachine.cn:
    container_name: hfc0.org1.bctrustmachine.cn
    image: blockchain101/fabric-hfc:1.0.3
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_PEER_ADDRESSAUTODETECT=true
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - TNVM_DIR=/usr/local/lib/node/.tnvm
    command: /bin/bash -c '. $$TNVM_DIR/tnvm.sh; $$TNVM_DIR/bin/gulp marbles_tls;'
    #command: /bin/bash 
    volumes:
        - /var/run/:/host/var/run/
        - ./config-org1:/dapps/marbles-4.0.2/config
        - ./channel/crypto-config:/dapps/marbles-4.0.2/crypto-config
        - ./channel/crypto-config/peerOrganizations/org1.bctrustmachine.cn/users/Admin@org1.bctrustmachine.cn/msp/keystore/fceb621a05806dc1e97df8c71e5d5e58cf805e1d959fa92252fc5901e0a1255b_sk:/dapps/marbles-4.0.2/config/crypto/fceb621a05806dc1e97df8c71e5d5e58cf805e1d959fa92252fc5901e0a1255b-priv
        - ./channel/crypto-config/peerOrganizations/org1.bctrustmachine.cn/users/Admin@org1.bctrustmachine.cn/msp/signcerts/Admin@org1.bctrustmachine.cn-cert.pem:/dapps/marbles-4.0.2/config/crypto/fceb621a05806dc1e97df8c71e5d5e58cf805e1d959fa92252fc5901e0a1255b-pub
    ports:
      - 3001:3001      
      - 9999:9999     
    depends_on:
      - ca0.org1.bctrustmachine.cn
      - orderer.bctrustmachine.cn
      - peer0.org1.bctrustmachine.cn
      
  hfc0.org2.bctrustmachine.cn:
    container_name: hfc0.org2.bctrustmachine.cn
    image: blockchain101/fabric-hfc:1.0.3
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_PEER_ADDRESSAUTODETECT=true
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - TNVM_DIR=/usr/local/lib/node/.tnvm      
    command: /bin/bash -c '. $$TNVM_DIR/tnvm.sh; $$TNVM_DIR/bin/gulp marbles_tls;'
    #command: /bin/bash
    volumes:
        - /var/run/:/host/var/run/
        - ./config-org2:/dapps/marbles-4.0.2/config
        - ./channel/crypto-config:/dapps/marbles-4.0.2/crypto-config
        - ./channel/crypto-config/peerOrganizations/org2.bctrustmachine.cn/users/Admin@org2.bctrustmachine.cn/msp/keystore/178333807cc4fa1426d80377a176d57d571f2d4b2d88f8ec7d2cd868af8d9a03_sk:/dapps/marbles-4.0.2/config/crypto/178333807cc4fa1426d80377a176d57d571f2d4b2d88f8ec7d2cd868af8d9a03-priv
        - ./channel/crypto-config/peerOrganizations/org2.bctrustmachine.cn/users/Admin@org2.bctrustmachine.cn/msp/signcerts/Admin@org2.bctrustmachine.cn-cert.pem:/dapps/marbles-4.0.2/config/crypto/178333807cc4fa1426d80377a176d57d571f2d4b2d88f8ec7d2cd868af8d9a03-pub        
    ports:
      - 3002:3002    
      - 9998:9999   
    depends_on:
      - ca0.org2.bctrustmachine.cn
      - orderer.bctrustmachine.cn
      - peer0.org2.bctrustmachine.cn

  hfcj0.org1.bctrustmachine.cn:
    container_name: hfcj0.org1.bctrustmachine.cn
    image: blockchain101/fabric-hfcj:1.0.3
    tty: true
    environment:
      - HFCJ_ORG_NAME=peerOrg1
      - ORDERER_ADDRESS=orderer.bctrustmachine.cn:7050
    command: /bin/bash -c './probeOrdererWithSleep.sh $$ORDERER_ADDRESS;./chaincode_posslip.sh;sleep 10000'
    #command: /bin/bash 
    volumes:
        - ./config-org1:/dapps/chaincode_jclient/config
        - ./channel/crypto-config:/dapps/chaincode_jclient/crypto-config
        - ./scripts/probeOrdererWithSleep.sh:/dapps/chaincode_jclient/probeOrdererWithSleep.sh       
        - ./scripts/chaincode_posslip.sh:/dapps/chaincode_jclient/chaincode_posslip.sh
    depends_on:
      - ca0.org1.bctrustmachine.cn
      - orderer.bctrustmachine.cn
      - peer0.org1.bctrustmachine.cn
      
  hfcj0.org2.bctrustmachine.cn:
    container_name: hfcj0.org2.bctrustmachine.cn
    image: blockchain101/fabric-hfcj:1.0.3
    tty: true
    environment:
      - HFCJ_ORG_NAME=peerOrg2
      - ORDERER_ADDRESS=orderer.bctrustmachine.cn:7050      
    command: /bin/bash -c './probeOrdererWithSleep.sh $$ORDERER_ADDRESS;./chaincode_posslip.sh;sleep 10000'
    #command: /bin/bash 
    volumes:
        - ./config-org2:/dapps/chaincode_jclient/config
        - ./channel/crypto-config:/dapps/chaincode_jclient/crypto-config
        - ./scripts/probeOrdererWithSleep.sh:/dapps/chaincode_jclient/probeOrdererWithSleep.sh        
        - ./scripts/chaincode_posslip.sh:/dapps/chaincode_jclient/chaincode_posslip.sh
    depends_on:
      - ca0.org2.bctrustmachine.cn
      - orderer.bctrustmachine.cn
      - peer0.org2.bctrustmachine.cn

